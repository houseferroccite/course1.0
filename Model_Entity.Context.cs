//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace course1._0
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
   
    using System.Linq;
    
    public partial class myCreatePO_projectEntities2 : DbContext
    {
        public myCreatePO_projectEntities2()
            : base("name=myCreatePO_projectEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Т_ВидыРабот> Т_ВидыРабот { get; set; }
        public virtual DbSet<Т_Договора> Т_Договора { get; set; }
        public virtual DbSet<Т_Должность> Т_Должность { get; set; }
        public virtual DbSet<Т_Клиент> Т_Клиент { get; set; }
        public virtual DbSet<Т_Кураторы> Т_Кураторы { get; set; }
        public virtual DbSet<Т_Штат_сотрудников> Т_Штат_сотрудников { get; set; }
        public virtual DbSet<Т_Языки_прог> Т_Языки_прог { get; set; }
        public virtual DbSet<Login> Login { get; set; }
        public virtual DbSet<Т_Договора_Архив> Т_Договора_Архив { get; set; }
        public virtual DbSet<Т_Договор_Этапы> Т_Договор_Этапы { get; set; }
    
        public virtual ObjectResult<DelPosition_Result> DelPosition(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DelPosition_Result>("DelPosition", iDParameter);
        }
    
        public virtual ObjectResult<InsertClient_Result> InsertClient(byte[] фото, string фио, string адрес, string реквизиты_банка, ObjectParameter iD)
        {
            var фотоParameter = фото != null ?
                new ObjectParameter("Фото", фото) :
                new ObjectParameter("Фото", typeof(byte[]));
    
            var фиоParameter = фио != null ?
                new ObjectParameter("Фио", фио) :
                new ObjectParameter("Фио", typeof(string));
    
            var адресParameter = адрес != null ?
                new ObjectParameter("Адрес", адрес) :
                new ObjectParameter("Адрес", typeof(string));
    
            var реквизиты_банкаParameter = реквизиты_банка != null ?
                new ObjectParameter("Реквизиты_банка", реквизиты_банка) :
                new ObjectParameter("Реквизиты_банка", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertClient_Result>("InsertClient", фотоParameter, фиоParameter, адресParameter, реквизиты_банкаParameter, iD);
        }
    
        public virtual ObjectResult<InsertLogin_Result> InsertLogin(string acces_rights, Nullable<int> password, ObjectParameter iD)
        {
            var acces_rightsParameter = acces_rights != null ?
                new ObjectParameter("Acces_rights", acces_rights) :
                new ObjectParameter("Acces_rights", typeof(string));
    
            var passwordParameter = password.HasValue ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertLogin_Result>("InsertLogin", acces_rightsParameter, passwordParameter, iD);
        }
    
        public virtual ObjectResult<InsertPosition_Result> InsertPosition(string position, ObjectParameter iD)
        {
            var positionParameter = position != null ?
                new ObjectParameter("position", position) :
                new ObjectParameter("position", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertPosition_Result>("InsertPosition", positionParameter, iD);
        }
    
        public virtual ObjectResult<string> LoadAllTables()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("LoadAllTables");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<UpdateClient_Result> UpdateClient(Nullable<int> iDClienta, byte[] фото, string фИО, string адрес, string реквизиты_банка)
        {
            var iDClientaParameter = iDClienta.HasValue ?
                new ObjectParameter("IDClienta", iDClienta) :
                new ObjectParameter("IDClienta", typeof(int));
    
            var фотоParameter = фото != null ?
                new ObjectParameter("Фото", фото) :
                new ObjectParameter("Фото", typeof(byte[]));
    
            var фИОParameter = фИО != null ?
                new ObjectParameter("ФИО", фИО) :
                new ObjectParameter("ФИО", typeof(string));
    
            var адресParameter = адрес != null ?
                new ObjectParameter("Адрес", адрес) :
                new ObjectParameter("Адрес", typeof(string));
    
            var реквизиты_банкаParameter = реквизиты_банка != null ?
                new ObjectParameter("Реквизиты_банка", реквизиты_банка) :
                new ObjectParameter("Реквизиты_банка", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateClient_Result>("UpdateClient", iDClientaParameter, фотоParameter, фИОParameter, адресParameter, реквизиты_банкаParameter);
        }
    
        public virtual ObjectResult<UpdatePosition_Result> UpdatePosition(Nullable<int> iDPosition, string position)
        {
            var iDPositionParameter = iDPosition.HasValue ?
                new ObjectParameter("IDPosition", iDPosition) :
                new ObjectParameter("IDPosition", typeof(int));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdatePosition_Result>("UpdatePosition", iDPositionParameter, positionParameter);
        }
    }
}
